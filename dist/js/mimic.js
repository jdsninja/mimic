(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var config = _interopRequire(require("./config"));

var Keyboard = _interopRequire(require("./keyboard"));

var Mouse = _interopRequire(require("./mouse"));

var Recorder = _interopRequire(require("./recorder"));

var Scroll = _interopRequire(require("./scroll"));

var Timer = _interopRequire(require("./timer"));

var Mimic = (function () {
  /**
  * @param {object} params
  * - container
  */

  function Mimic(params) {
    _classCallCheck(this, Mimic);

    this.container = document.getElementById(params.container);
  }

  _createClass(Mimic, {
    init: {
      value: function init() {
        var keyboard = new Keyboard();
        var mouse = new Mouse(this.container);
        var scroll = new Scroll();
      }
    }
  });

  return Mimic;
})();

;

global.Mimic = Mimic;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJvbWVkc291Y3kvU2l0ZXMvbWltaWMvc3JjL2pzL21pbWljLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLENBQUM7Ozs7Ozs7O0lBRU4sTUFBTSwyQkFBTSxVQUFVOztJQUN0QixRQUFRLDJCQUFNLFlBQVk7O0lBQzFCLEtBQUssMkJBQU0sU0FBUzs7SUFDcEIsUUFBUSwyQkFBTSxZQUFZOztJQUMxQixNQUFNLDJCQUFNLFVBQVU7O0lBQ3RCLEtBQUssMkJBQU0sU0FBUzs7SUFFckIsS0FBSzs7Ozs7O0FBS0UsV0FMUCxLQUFLLENBS0csTUFBTSxFQUFFOzBCQUxoQixLQUFLOztBQU1QLFFBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDNUQ7O2VBUEcsS0FBSztBQVFULFFBQUk7YUFBQSxnQkFBRztBQUNMLFlBQUksUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7QUFDOUIsWUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLFlBQUksTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7T0FDM0I7Ozs7U0FaRyxLQUFLOzs7QUFhVixDQUFDOztBQUVGLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnO1xuaW1wb3J0IE1vdXNlIGZyb20gJy4vbW91c2UnO1xuaW1wb3J0IFJlY29yZGVyIGZyb20gJy4vcmVjb3JkZXInO1xuaW1wb3J0IFNjcm9sbCBmcm9tICcuL3Njcm9sbCc7XG5pbXBvcnQgVGltZXIgZnJvbSAnLi90aW1lcic7XG5cbmNsYXNzIE1pbWljIHtcbiAgLyoqXG4gICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICAqIC0gY29udGFpbmVyXG4gICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyYW1zLmNvbnRhaW5lcik7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICB2YXIga2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcbiAgICB2YXIgbW91c2UgPSBuZXcgTW91c2UodGhpcy5jb250YWluZXIpO1xuICAgIHZhciBzY3JvbGwgPSBuZXcgU2Nyb2xsKCk7XG4gIH1cbn07XG5cbmdsb2JhbC5NaW1pYyA9IE1pbWljO1xuIl19
},{"./config":2,"./keyboard":3,"./mouse":4,"./recorder":5,"./scroll":6,"./timer":7}],2:[function(require,module,exports){
"use strict";

var config = {};
module.exports = config;

},{}],3:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Keyboard = function Keyboard() {
  _classCallCheck(this, Keyboard);

  document.onkeydown = function (event) {
    if (!event) {
      event = window.event; // need to double check what this does exactly
    }
    console.log(event.charCode, event.keyCode, String.fromCharCode(event.keyCode));
  };
};

module.exports = Keyboard;

},{}],4:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Mouse = function Mouse(container) {
  _classCallCheck(this, Mouse);

  // Mouse
  container.onmousemove = function (e) {
    console.log("x", e.pageX, ", y", e.pageY);
  };

  // Mouse Double click
  container.ondblclick = function (e) {
    console.log("doubleclick");
  };

  // Mouse Click
  container.onclick = function (e) {
    console.log("click");
  };
};

module.exports = Mouse;

},{}],5:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Recorder = function Recorder() {
  _classCallCheck(this, Recorder);
};

module.exports = Recorder;

},{}],6:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Scroll = function Scroll() {
  _classCallCheck(this, Scroll);

  var B = document.body,
      H = document.documentElement,
      height;

  if (typeof document.height !== "undefined") {
    height = document.height // For webkit browsers
    ;
  } else {
    height = Math.max(B.scrollHeight, B.offsetHeight, H.clientHeight, H.scrollHeight, H.offsetHeight);
  }

  document.onscroll = function () {
    if (window.scrollY === 0) {
      console.log("page top");
    } else if (height === window.scrollY + H.clientHeight) {
      console.log("page bottom");
    } else {
      console.log("scrolling");
    }
  };
};

module.exports = Scroll;

},{}],7:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Timer = function Timer() {
  _classCallCheck(this, Timer);
};

module.exports = Timer;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
