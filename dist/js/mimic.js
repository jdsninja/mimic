(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var config = _interopRequire(require("./config"));

var Keyboard = _interopRequire(require("./keyboard"));

var Mouse = _interopRequire(require("./mouse"));

var Recorder = _interopRequire(require("./recorder"));

var Scroll = _interopRequire(require("./scroll"));

var Timer = _interopRequire(require("./timer"));

var Mimic = (function () {
  /**
  * @param {object} params
  * - container
  */

  function Mimic(params) {
    _classCallCheck(this, Mimic);

    this.container = document.getElementById(params.container);
  }

  _createClass(Mimic, {
    init: {
      value: function init() {
        var keyboard = new Keyboard();
        var mouse = new Mouse(this.container);
      }
    }
  });

  return Mimic;
})();

;

global.Mimic = Mimic;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJvbWVkc291Y3kvU2l0ZXMvbWltaWMvc3JjL2pzL21pbWljLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLENBQUM7Ozs7Ozs7O0lBRU4sTUFBTSwyQkFBTSxVQUFVOztJQUN0QixRQUFRLDJCQUFNLFlBQVk7O0lBQzFCLEtBQUssMkJBQU0sU0FBUzs7SUFDcEIsUUFBUSwyQkFBTSxZQUFZOztJQUMxQixNQUFNLDJCQUFNLFVBQVU7O0lBQ3RCLEtBQUssMkJBQU0sU0FBUzs7SUFFckIsS0FBSzs7Ozs7O0FBS0UsV0FMUCxLQUFLLENBS0csTUFBTSxFQUFFOzBCQUxoQixLQUFLOztBQU1QLFFBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDNUQ7O2VBUEcsS0FBSztBQVFULFFBQUk7YUFBQSxnQkFBRztBQUNMLFlBQUksUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7QUFDOUIsWUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQ3ZDOzs7O1NBWEcsS0FBSzs7O0FBWVYsQ0FBQzs7QUFFRixNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJztcbmltcG9ydCBNb3VzZSBmcm9tICcuL21vdXNlJztcbmltcG9ydCBSZWNvcmRlciBmcm9tICcuL3JlY29yZGVyJztcbmltcG9ydCBTY3JvbGwgZnJvbSAnLi9zY3JvbGwnO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4vdGltZXInO1xuXG5jbGFzcyBNaW1pYyB7XG4gIC8qKlxuICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAgKiAtIGNvbnRhaW5lclxuICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmFtcy5jb250YWluZXIpO1xuICB9XG4gIGluaXQoKSB7XG4gICAgdmFyIGtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG4gICAgdmFyIG1vdXNlID0gbmV3IE1vdXNlKHRoaXMuY29udGFpbmVyKTtcbiAgfVxufTtcblxuZ2xvYmFsLk1pbWljID0gTWltaWM7XG4iXX0=
},{"./config":2,"./keyboard":3,"./mouse":4,"./recorder":5,"./scroll":6,"./timer":7}],2:[function(require,module,exports){
"use strict";

var config = {};
module.exports = config;

},{}],3:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Keyboard = function Keyboard() {
  _classCallCheck(this, Keyboard);

  document.onkeydown = function (event) {
    if (!event) {
      event = window.event; // need to double check what this does exactly
    }
    console.log(event.charCode, event.keyCode, String.fromCharCode(event.keyCode));
  };
};

module.exports = Keyboard;

},{}],4:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Mouse = function Mouse(container) {
  _classCallCheck(this, Mouse);

  // Mouse
  container.onmousemove = function (e) {
    console.log("x", e.pageX, ", y", e.pageY);
  };

  // Mouse Double click
  container.ondblclick = function (e) {
    console.log("doubleclick");
  };

  // Mouse Click
  container.onclick = function (e) {
    console.log("click");
  };
};

module.exports = Mouse;

},{}],5:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Recorder = function Recorder() {
  _classCallCheck(this, Recorder);
};

module.exports = Recorder;

},{}],6:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Scroll = function Scroll() {
  _classCallCheck(this, Scroll);

  var B = document.body,
      H = document.documentElement,
      height;

  if (typeof document.height !== "undefined") {
    height = document.height // For webkit browsers
    ;
  } else {
    height = Math.max(B.scrollHeight, B.offsetHeight, H.clientHeight, H.scrollHeight, H.offsetHeight);
  }

  document.onscroll = function () {
    if (window.scrollY === 0) {
      console.log("page top");
    } else if (height === window.scrollY + H.clientHeight) {
      console.log("page bottom");
    } else {
      console.log("scrolling");
    }
  };
};

module.exports = Scroll;

},{}],7:[function(require,module,exports){
"use strict";

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Timer = function Timer() {
  _classCallCheck(this, Timer);
};

module.exports = Timer;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvbWltaWMuanMiLCIvVXNlcnMvamVyb21lZHNvdWN5L1NpdGVzL21pbWljL3NyYy9qcy9jb25maWcuanMiLCIvVXNlcnMvamVyb21lZHNvdWN5L1NpdGVzL21pbWljL3NyYy9qcy9rZXlib2FyZC5qcyIsIi9Vc2Vycy9qZXJvbWVkc291Y3kvU2l0ZXMvbWltaWMvc3JjL2pzL21vdXNlLmpzIiwiL1VzZXJzL2plcm9tZWRzb3VjeS9TaXRlcy9taW1pYy9zcmMvanMvcmVjb3JkZXIuanMiLCIvVXNlcnMvamVyb21lZHNvdWN5L1NpdGVzL21pbWljL3NyYy9qcy9zY3JvbGwuanMiLCIvVXNlcnMvamVyb21lZHNvdWN5L1NpdGVzL21pbWljL3NyYy9qcy90aW1lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2xEQSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7aUJBQ0QsTUFBTTs7O0FDRHJCLFlBQVksQ0FBQzs7OztJQUVRLFFBQVEsR0FDaEIsU0FEUSxRQUFRLEdBQ2I7d0JBREssUUFBUTs7QUFFekIsVUFBUSxDQUFDLFNBQVMsR0FBRyxVQUFTLEtBQUssRUFBRTtBQUNuQyxRQUFJLENBQUMsS0FBSyxFQUFDO0FBQ1QsV0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7S0FDdEI7QUFDRCxXQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0dBQ2hGLENBQUM7Q0FDSDs7aUJBUmtCLFFBQVE7OztBQ0Y3QixZQUFZLENBQUM7Ozs7SUFFUSxLQUFLLEdBQ2IsU0FEUSxLQUFLLENBQ1osU0FBUyxFQUFFO3dCQURKLEtBQUs7OztBQUd0QixXQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsQ0FBQyxFQUFDO0FBQ2pDLFdBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUN6QyxDQUFBOzs7QUFHRCxXQUFTLENBQUMsVUFBVSxHQUFHLFVBQVMsQ0FBQyxFQUFDO0FBQ2hDLFdBQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7R0FDNUIsQ0FBQTs7O0FBR0QsV0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFTLENBQUMsRUFBQztBQUM3QixXQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ3RCLENBQUE7Q0FDRjs7aUJBaEJrQixLQUFLOzs7QUNGMUIsWUFBWSxDQUFDOzs7O0lBRVEsUUFBUSxHQUNoQixTQURRLFFBQVEsR0FDYjt3QkFESyxRQUFRO0NBRTFCOztpQkFGa0IsUUFBUTs7O0FDRjdCLFlBQVksQ0FBQzs7OztJQUVRLE1BQU0sR0FDZCxTQURRLE1BQU0sR0FDWDt3QkFESyxNQUFNOztBQUV2QixNQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSTtNQUNqQixDQUFDLEdBQUcsUUFBUSxDQUFDLGVBQWU7TUFDNUIsTUFBTSxDQUFBOztBQUVWLE1BQUksT0FBTyxRQUFRLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxVQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU07QUFBQSxLQUFBO0dBQ3pCLE1BQU07QUFDTCxVQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUUsQ0FBQztHQUNwRzs7QUFFRCxVQUFRLENBQUMsUUFBUSxHQUFHLFlBQVc7QUFDN0IsUUFBRyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBQztBQUN0QixhQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3pCLE1BQUssSUFBRyxNQUFNLEtBQUssTUFBTSxDQUFDLE9BQU8sR0FBSSxDQUFDLENBQUMsWUFBWSxFQUFDO0FBQ25ELGFBQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDNUIsTUFBSTtBQUNILGFBQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDMUI7R0FDRixDQUFDO0NBQ0g7O2lCQXJCa0IsTUFBTTs7O0FDRjNCLFlBQVksQ0FBQzs7OztJQUVRLEtBQUssR0FDYixTQURRLEtBQUssR0FDVjt3QkFESyxLQUFLO0NBRXZCOztpQkFGa0IsS0FBSyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24gKGdsb2JhbCl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIga2V5IGluIHByb3BzKSB7IHZhciBwcm9wID0gcHJvcHNba2V5XTsgcHJvcC5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAocHJvcC52YWx1ZSkgcHJvcC53cml0YWJsZSA9IHRydWU7IH0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcyk7IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG52YXIgY29uZmlnID0gX2ludGVyb3BSZXF1aXJlKHJlcXVpcmUoXCIuL2NvbmZpZ1wiKSk7XG5cbnZhciBLZXlib2FyZCA9IF9pbnRlcm9wUmVxdWlyZShyZXF1aXJlKFwiLi9rZXlib2FyZFwiKSk7XG5cbnZhciBNb3VzZSA9IF9pbnRlcm9wUmVxdWlyZShyZXF1aXJlKFwiLi9tb3VzZVwiKSk7XG5cbnZhciBSZWNvcmRlciA9IF9pbnRlcm9wUmVxdWlyZShyZXF1aXJlKFwiLi9yZWNvcmRlclwiKSk7XG5cbnZhciBTY3JvbGwgPSBfaW50ZXJvcFJlcXVpcmUocmVxdWlyZShcIi4vc2Nyb2xsXCIpKTtcblxudmFyIFRpbWVyID0gX2ludGVyb3BSZXF1aXJlKHJlcXVpcmUoXCIuL3RpbWVyXCIpKTtcblxudmFyIE1pbWljID0gKGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICAqIC0gY29udGFpbmVyXG4gICovXG5cbiAgZnVuY3Rpb24gTWltaWMocGFyYW1zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1pbWljKTtcblxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyYW1zLmNvbnRhaW5lcik7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWltaWMsIHtcbiAgICBpbml0OiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIGtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG4gICAgICAgIHZhciBtb3VzZSA9IG5ldyBNb3VzZSh0aGlzLmNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gTWltaWM7XG59KSgpO1xuXG47XG5cbmdsb2JhbC5NaW1pYyA9IE1pbWljO1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5cVpYSnZiV1ZrYzI5MVkza3ZVMmwwWlhNdmJXbHRhV012YzNKakwycHpMMjFwYldsakxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVN4WlFVRlpMRU5CUVVNN096czdPenM3TzBsQlJVNHNUVUZCVFN3eVFrRkJUU3hWUVVGVk96dEpRVU4wUWl4UlFVRlJMREpDUVVGTkxGbEJRVms3TzBsQlF6RkNMRXRCUVVzc01rSkJRVTBzVTBGQlV6czdTVUZEY0VJc1VVRkJVU3d5UWtGQlRTeFpRVUZaT3p0SlFVTXhRaXhOUVVGTkxESkNRVUZOTEZWQlFWVTdPMGxCUTNSQ0xFdEJRVXNzTWtKQlFVMHNVMEZCVXpzN1NVRkZja0lzUzBGQlN6czdPenM3TzBGQlMwVXNWMEZNVUN4TFFVRkxMRU5CUzBjc1RVRkJUU3hGUVVGRk96QkNRVXhvUWl4TFFVRkxPenRCUVUxUUxGRkJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdSMEZETlVRN08yVkJVRWNzUzBGQlN6dEJRVkZVTEZGQlFVazdZVUZCUVN4blFrRkJSenRCUVVOTUxGbEJRVWtzVVVGQlVTeEhRVUZITEVsQlFVa3NVVUZCVVN4RlFVRkZMRU5CUVVNN1FVRkRPVUlzV1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzA5QlEzWkRPenM3TzFOQldFY3NTMEZCU3pzN08wRkJXVllzUTBGQlF6czdRVUZGUml4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5SXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdZMjl1Wm1sbklHWnliMjBnSnk0dlkyOXVabWxuSnp0Y2JtbHRjRzl5ZENCTFpYbGliMkZ5WkNCbWNtOXRJQ2N1TDJ0bGVXSnZZWEprSnp0Y2JtbHRjRzl5ZENCTmIzVnpaU0JtY205dElDY3VMMjF2ZFhObEp6dGNibWx0Y0c5eWRDQlNaV052Y21SbGNpQm1jbTl0SUNjdUwzSmxZMjl5WkdWeUp6dGNibWx0Y0c5eWRDQlRZM0p2Ykd3Z1puSnZiU0FuTGk5elkzSnZiR3duTzF4dWFXMXdiM0owSUZScGJXVnlJR1p5YjIwZ0p5NHZkR2x0WlhJbk8xeHVYRzVqYkdGemN5Qk5hVzFwWXlCN1hHNGdJQzhxS2x4dUlDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQndZWEpoYlhOY2JpQWdLaUF0SUdOdmJuUmhhVzVsY2x4dUlDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaHdZWEpoYlhNcElIdGNiaUFnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLSEJoY21GdGN5NWpiMjUwWVdsdVpYSXBPMXh1SUNCOVhHNGdJR2x1YVhRb0tTQjdYRzRnSUNBZ2RtRnlJR3RsZVdKdllYSmtJRDBnYm1WM0lFdGxlV0p2WVhKa0tDazdYRzRnSUNBZ2RtRnlJRzF2ZFhObElEMGdibVYzSUUxdmRYTmxLSFJvYVhNdVkyOXVkR0ZwYm1WeUtUdGNiaUFnZlZ4dWZUdGNibHh1WjJ4dlltRnNMazFwYldsaklEMGdUV2x0YVdNN1hHNGlYWDA9IiwibGV0IGNvbmZpZyA9IHt9O1xuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZXlib2FyZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KXtcbiAgICAgICAgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7IC8vIG5lZWQgdG8gZG91YmxlIGNoZWNrIHdoYXQgdGhpcyBkb2VzIGV4YWN0bHlcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmNoYXJDb2RlLCBldmVudC5rZXlDb2RlLCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LmtleUNvZGUpKTtcbiAgICB9O1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlIHtcbiAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgLy8gTW91c2VcbiAgICBjb250YWluZXIub25tb3VzZW1vdmUgPSBmdW5jdGlvbihlKXtcbiAgICAgIGNvbnNvbGUubG9nKCd4JyxlLnBhZ2VYLCAnLCB5JyxlLnBhZ2VZKTtcbiAgICB9XG5cbiAgICAvLyBNb3VzZSBEb3VibGUgY2xpY2tcbiAgICBjb250YWluZXIub25kYmxjbGljayA9IGZ1bmN0aW9uKGUpe1xuICAgICAgY29uc29sZS5sb2coJ2RvdWJsZWNsaWNrJyk7XG4gICAgfVxuXG4gICAgLy8gTW91c2UgQ2xpY2tcbiAgICBjb250YWluZXIub25jbGljayA9IGZ1bmN0aW9uKGUpe1xuICAgICAgY29uc29sZS5sb2coJ2NsaWNrJyk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY29yZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdmFyIEIgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICBIID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBoZWlnaHRcblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaGVpZ2h0ID0gZG9jdW1lbnQuaGVpZ2h0IC8vIEZvciB3ZWJraXQgYnJvd3NlcnNcbiAgICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoIEIuc2Nyb2xsSGVpZ2h0LCBCLm9mZnNldEhlaWdodCxILmNsaWVudEhlaWdodCwgSC5zY3JvbGxIZWlnaHQsIEgub2Zmc2V0SGVpZ2h0ICk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQub25zY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmKHdpbmRvdy5zY3JvbGxZID09PSAwKXtcbiAgICAgICAgY29uc29sZS5sb2coJ3BhZ2UgdG9wJyk7XG4gICAgICB9ZWxzZSBpZihoZWlnaHQgPT09IHdpbmRvdy5zY3JvbGxZICsgIEguY2xpZW50SGVpZ2h0KXtcbiAgICAgICAgY29uc29sZS5sb2coJ3BhZ2UgYm90dG9tJyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgY29uc29sZS5sb2coJ3Njcm9sbGluZycpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxufVxuIl19
